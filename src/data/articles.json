[
  {
    "id": 1,
    "title": "Mes premiers pas avec HTML et CSS",
    "slug": "mes-premiers-pas-avec-html-et-css",
    "summary": "Retour sur mes tout d√©buts dans le code avec les bases du HTML et du CSS.",
    "content": "Aujourd'hui marque le d√©but de mon aventure dans le d√©veloppement web ! J'ai d√©couvert la structure d'une page HTML avec ses balises essentielles : `<html>`, `<head>`, `<body>`. J'ai appris que chaque √©l√©ment a sa place et son r√¥le.\n\nLa s√©mantique HTML m'a particuli√®rement marqu√© - utiliser `<header>`, `<main>`, `<article>`, `<section>` pour structurer logiquement le contenu. J'ai cr√©√© ma premi√®re page avec un titre, des paragraphes et une liste.\n\nPuis est arriv√© le CSS ! Quelle r√©v√©lation de voir mes √©l√©ments HTML prendre vie avec des couleurs, des polices personnalis√©es, des marges et du padding. J'ai jou√© avec :\n- Les s√©lecteurs (class, id, √©l√©ments)\n- La propri√©t√© `display` (block, inline, flex)\n- Le mod√®le de bo√Æte (margin, border, padding)\n- Les couleurs en hexad√©cimal et RGB\n\nMon premier site √©tait tr√®s simple mais fonctionnel. J'ai compris que HTML donne la structure, CSS l'apparence. Un monde de possibilit√©s s'ouvre devant moi !",
    "cover_url": "https://www.iim.fr/ecole-web/wp-content/uploads/2017/01/HTML5.jpg",
    "created_at": "2024-04-01 10:00:00",
    "user_id": 1
  },
  {
    "id": 2,
    "title": "Apprendre JavaScript : logique et DOM",
    "slug": "apprendre-javascript-logique-et-dom",
    "summary": "Mon entr√©e dans le monde de la programmation avec JavaScript.",
    "content": "Apr√®s avoir ma√Ætris√© HTML/CSS, il √©tait temps de passer au JavaScript pour donner vie √† mes pages !\n\nJ'ai commenc√© par les bases de la programmation :\n- **Variables** : `let`, `const`, `var` et leurs diff√©rences de port√©e\n- **Types de donn√©es** : string, number, boolean, array, object\n- **Conditions** : if/else, switch, op√©rateurs de comparaison\n- **Boucles** : for, while, forEach pour it√©rer sur des donn√©es\n- **Fonctions** : d√©claration, param√®tres, valeur de retour\n\nLe vrai tournant a √©t√© la manipulation du DOM. J'ai d√©couvert comment :\n- S√©lectionner des √©l√©ments avec `querySelector` et `getElementById`\n- Modifier le contenu avec `textContent` et `innerHTML`\n- Ajouter/supprimer des classes avec `classList`\n- √âcouter les √©v√©nements avec `addEventListener`\n\nMon premier projet interactif : un calculateur simple ! L'utilisateur clique sur des boutons, JavaScript r√©cup√®re les valeurs, fait les calculs et affiche le r√©sultat. Voir la page r√©agir aux actions de l'utilisateur √©tait magique.\n\nJ'ai aussi cr√©√© un petit jeu de devinette de nombre. JavaScript g√©n√®re un nombre al√©atoire, l'utilisateur devine, et le programme donne des indices. C'√©tait ma premi√®re vraie logique de programmation !",
    "cover_url": "https://bairesdev.mo.cloudinary.net/blog/2023/08/What-Is-JavaScript-Used-For.jpg?tx=w_1920,q_auto",
    "created_at": "2024-04-10 15:00:00",
    "user_id": 1
  },
  {
    "id": 3,
    "title": "D√©couverte de Git et GitHub",
    "slug": "decouverte-de-git-et-github",
    "summary": "Premier contact avec le versioning et la collaboration gr√¢ce √† Git.",
    "content": "Git a √©t√© une r√©v√©lation ! Finalement, plus besoin de dossiers 'projet_v1', 'projet_v2', 'projet_final', 'projet_vraiment_final' üòÖ\n\n**Les bases de Git que j'ai apprises :**\n- `git init` pour initialiser un repository\n- `git add` pour staging mes fichiers\n- `git commit` pour sauvegarder un √©tat du projet\n- `git status` pour voir l'√©tat de mes fichiers\n- `git log` pour voir l'historique des commits\n\n**Le workflow qui a chang√© ma vie :**\n1. Je modifie mes fichiers\n2. `git add .` pour tout ajouter au staging\n3. `git commit -m \"message descriptif\"` pour sauvegarder\n4. `git push` pour envoyer sur GitHub\n\n**GitHub m'a ouvert de nouveaux horizons :**\n- H√©berger mon code gratuitement\n- Collaborer avec d'autres d√©veloppeurs\n- D√©couvrir des projets open source\n- Utiliser les Issues pour tracker les bugs\n- Les Pull Requests pour proposer des modifications\n\n**Les branches m'ont lib√©r√© :**\n- `git branch feature/nouvelle-fonctionnalit√©`\n- `git checkout` pour naviguer entre branches\n- `git merge` pour fusionner les modifications\n\nJ'ai m√™me contribu√© √† mon premier projet open source ! C'√©tait juste une correction de typo dans la documentation, mais quelle fiert√© de voir ma PR accept√©e.\n\nMaintenant, je ne peux plus coder sans Git. C'est devenu un r√©flexe : code, commit, push, repeat !",
    "cover_url": "https://www.20i.com/blog/wp-content/uploads/2022/08/git-blog-header.png",
    "created_at": "2024-04-15 17:30:00",
    "user_id": 1
  },
  {
    "id": 4,
    "title": "Mes premiers composants React",
    "slug": "mes-premiers-composants-react",
    "summary": "Entr√©e dans le monde des composants r√©actifs avec React.",
    "content": "React a compl√®tement chang√© ma fa√ßon de penser le d√©veloppement frontend ! Au lieu de manipuler directement le DOM, je cr√©e des composants r√©utilisables.\n\n**Mes premiers concepts React :**\n\n**Composants fonctionnels :**\n```jsx\nfunction Greeting(props) {\n  return <h1>Bonjour {props.name} !</h1>;\n}\n```\nC'√©tait magique de voir comment une simple fonction peut devenir un √©l√©ment r√©utilisable !\n\n**Props - la communication parent/enfant :**\nJ'ai cr√©√© une `Card` component qui re√ßoit titre, contenu et image via les props. Un composant, mille utilisations diff√©rentes !\n\n**State avec useState :**\n```jsx\nconst [count, setCount] = useState(0);\n```\nMon premier state : un compteur ! Cliquer sur un bouton incr√©mente la valeur, et React met automatiquement √† jour l'affichage. Fini `document.getElementById` et la manipulation manuelle du DOM !\n\n**useEffect pour les effets de bord :**\nCharger des donn√©es d'une API, √©couter le scroll, nettoyer des timers... useEffect g√®re tout √ßa proprement.\n\n**Mon premier vrai projet React :**\nUne todo list ! Ajouter des t√¢ches, les marquer comme termin√©es, les supprimer. J'ai d√©couvert :\n- Comment g√©rer une liste d'objets dans le state\n- L'importance de la `key` prop dans les listes\n- Le passage de callbacks aux enfants pour remonter les √©v√©nements\n\n**Ce qui m'a le plus impressionn√© :**\n- La r√©activit√© : modifier le state met automatiquement √† jour l'UI\n- La composabilit√© : construire des UIs complexes avec des petits composants simples\n- La logique d√©clarative : d√©crire √† quoi doit ressembler l'UI selon l'√©tat, React se charge du reste\n\nReact m'a fait comprendre l'architecture moderne des applications frontend. Plus jamais de jQuery spaghetti code !",
    "cover_url": "https://www.sooyoos.com/app/uploads/2021/06/react-javascript.png",
    "created_at": "2024-05-01 13:45:00",
    "user_id": 1
  },
  {
    "id": 5,
    "title": "Comprendre le Routing avec React Router",
    "slug": "comprendre-le-routing-avec-react-router",
    "summary": "Naviguer entre diff√©rentes pages avec React Router.",
    "content": "Avec React Router, j'ai transform√© mon application React en une vraie SPA (Single Page Application) avec navigation fluide !\n\n**Installation et setup de base :**\n```jsx\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/about\" element={<About />} />\n        <Route path=\"/contact\" element={<Contact />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n```\n\n**Navigation avec Link :**\nFini les `<a href>` qui rechargent la page ! `<Link to=\"/about\">` navigue instantan√©ment.\n\n**Routes dynamiques :**\n```jsx\n<Route path=\"/user/:id\" element={<UserProfile />} />\n```\nJ'ai cr√©√© des profils utilisateur avec `useParams()` pour r√©cup√©rer l'ID depuis l'URL. URL propres et bookmarkables !\n\n**Nested Routes et Layouts persistants :**\n```jsx\n<Route path=\"/dashboard\" element={<DashboardLayout />}>\n  <Route index element={<DashboardHome />} />\n  <Route path=\"profile\" element={<Profile />} />\n  <Route path=\"settings\" element={<Settings />} />\n</Route>\n```\n\nLe layout (header, sidebar) reste affich√©, seul le contenu central change. UX parfaite !\n\n**Protection de routes :**\nJ'ai cr√©√© un composant `ProtectedRoute` qui v√©rifie l'authentification avant d'afficher certaines pages. Redirection automatique vers le login si non connect√©.\n\n**Query Parameters et Search :**\n- `useSearchParams()` pour lire/modifier les param√®tres d'URL\n- Parfait pour les filtres, pagination, recherche\n- L'√©tat de l'app est synchronis√© avec l'URL\n\n**Navigation programmatique :**\n```jsx\nconst navigate = useNavigate();\nnavigate('/success', { replace: true });\n```\nRediriger apr√®s un formulaire, une action r√©ussie, etc.\n\n**Ce que √ßa change :**\n- Navigation instantan√©e sans rechargement\n- URLs propres et partageables\n- Boutons pr√©c√©dent/suivant du navigateur fonctionnent\n- SEO-friendly avec du server-side rendering\n- Architecture claire avec s√©paration des vues\n\nReact Router a donn√© une structure professionnelle √† mes apps React !",
    "cover_url": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQjyJuSI3tHjWVQPPXJG1gZHtsOerMo9jATSQ&s",
    "created_at": "2024-05-10 09:00:00",
    "user_id": 1
  },
  {
    "id": 6,
    "title": "Mon premier backend avec Express.js",
    "slug": "mon-premier-backend-avec-express-js",
    "summary": "Mise en place d'un serveur Node.js avec Express.",
    "content": "Le grand saut vers le backend ! Express.js m'a permis de cr√©er mon premier serveur et de comprendre l'architecture client-serveur.\n\n**Setup de base :**\n```javascript\nconst express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\napp.listen(PORT, () => {\n  console.log(`Serveur lanc√© sur le port ${PORT}`);\n});\n```\n\nVoir \"Serveur lanc√© sur le port 3001\" dans le terminal pour la premi√®re fois... magique ! üöÄ\n\n**Mes premi√®res routes :**\n```javascript\napp.get('/api/users', (req, res) => {\n  res.json({ message: 'Liste des utilisateurs' });\n});\n\napp.post('/api/users', (req, res) => {\n  // Cr√©er un nouvel utilisateur\n  res.status(201).json({ message: 'Utilisateur cr√©√©' });\n});\n```\n\n**Middlewares - le c≈ìur d'Express :**\n- `express.json()` pour parser le body des requ√™tes\n- `cors()` pour autoriser les requ√™tes cross-origin\n- Middleware custom pour logger chaque requ√™te :\n```javascript\napp.use((req, res, next) => {\n  console.log(`${req.method} ${req.url}`);\n  next();\n});\n```\n\n**Structure d'une API REST :**\n- GET /api/articles (tous les articles)\n- GET /api/articles/:id (un article sp√©cifique)\n- POST /api/articles (cr√©er un article)\n- PUT /api/articles/:id (modifier un article)\n- DELETE /api/articles/:id (supprimer un article)\n\n**Gestion des erreurs :**\n```javascript\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Erreur serveur' });\n});\n```\n\n**Variables d'environnement avec dotenv :**\n```\nDB_URL=mongodb://localhost:27017/myapp\nJWT_SECRET=mon_secret_super_securise\n```\nFinies les donn√©es sensibles hardcod√©es dans le code !\n\n**Mon premier projet fullstack :**\nUne API pour g√©rer une biblioth√®que de livres connect√©e √† MongoDB. Le frontend React consomme l'API Express. Voir les donn√©es s'afficher en temps r√©el apr√®s un POST depuis le frontend... c'√©tait euphorique !\n\n**Ce que j'ai appris :**\n- Architecture MVC (Model-View-Controller)\n- S√©paration des responsabilit√©s (routes, controllers, services)\n- Gestion asynchrone avec async/await\n- Validation des donn√©es d'entr√©e\n- Status codes HTTP appropri√©s\n- S√©curit√© de base (CORS, validation, sanitisation)\n\nExpress m'a ouvert la porte du d√©veloppement fullstack !",
    "cover_url": "https://faustocintra.com.br/wp-content/uploads/2024/10/expressjs.jpg",
    "created_at": "2024-05-20 16:00:00",
    "user_id": 1
  },
  {
    "id": 7,
    "title": "Base de donn√©es et SQL pour les devs",
    "slug": "base-de-donnees-et-sql-pour-les-devs",
    "summary": "Premiers pas avec les bases relationnelles et SQL.",
    "content": "Les bases de donn√©es relationnelles et SQL ont √©t√© un tournant dans ma compr√©hension de la persistance des donn√©es !\n\n**Concepts fondamentaux :**\n- **Tables** : structures qui stockent les donn√©es\n- **Colonnes** : d√©finissent les champs (nom, email, age...)\n- **Lignes** : les enregistrements individuels\n- **Cl√©s primaires** : identifiants uniques (id auto-incr√©ment√©)\n- **Cl√©s √©trang√®res** : r√©f√©rences vers d'autres tables\n\n**Ma premi√®re base : un blog :**\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(50) NOT NULL UNIQUE,\n  email VARCHAR(100) NOT NULL UNIQUE,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE articles (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  title VARCHAR(200) NOT NULL,\n  content TEXT,\n  user_id INT,\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n**Requ√™tes de base :**\n```sql\n-- S√©lectionner tous les articles\nSELECT * FROM articles;\n\n-- Filtrer avec WHERE\nSELECT title, content FROM articles WHERE user_id = 1;\n\n-- Ordonner par date\nSELECT * FROM articles ORDER BY created_at DESC;\n\n-- Compter les articles par utilisateur\nSELECT user_id, COUNT(*) as nb_articles \nFROM articles \nGROUP BY user_id;\n```\n\n**Les JOINs - la puissance des relations :**\n```sql\n-- Afficher articles avec nom d'auteur\nSELECT a.title, a.content, u.username\nFROM articles a\nINNER JOIN users u ON a.user_id = u.id;\n\n-- LEFT JOIN pour inclure les users sans articles\nSELECT u.username, COUNT(a.id) as nb_articles\nFROM users u\nLEFT JOIN articles a ON u.id = a.user_id\nGROUP BY u.id;\n```\n\n**Op√©rations de modification :**\n```sql\n-- Ins√©rer un nouvel article\nINSERT INTO articles (title, content, user_id) \nVALUES ('Mon titre', 'Le contenu...', 1);\n\n-- Mettre √† jour\nUPDATE articles \nSET title = 'Nouveau titre' \nWHERE id = 5;\n\n-- Supprimer\nDELETE FROM articles WHERE id = 5;\n```\n\n**Bonnes pratiques apprises :**\n- **Normalisation** : √©viter la duplication des donn√©es\n- **Index** : acc√©l√©rer les recherches sur les colonnes fr√©quemment utilis√©es\n- **Contraintes** : UNIQUE, NOT NULL, CHECK pour assurer l'int√©grit√©\n- **Transactions** : BEGIN, COMMIT, ROLLBACK pour les op√©rations critiques\n\n**Outils d√©couverts :**\n- **phpMyAdmin** pour l'interface graphique\n- **MySQL Workbench** pour la mod√©lisation\n- **Sequel Pro** sur Mac (RIP, mais excellent)\n- **TablePlus** comme alternative moderne\n\n**Int√©gration avec Node.js :**\n```javascript\nconst mysql = require('mysql2/promise');\n\nconst getArticles = async () => {\n  const [rows] = await connection.execute(\n    'SELECT * FROM articles ORDER BY created_at DESC'\n  );\n  return rows;\n};\n```\n\n**Ce qui m'a marqu√© :**\n- La puissance des JOINs pour croiser les donn√©es\n- L'importance du design de sch√©ma d√®s le d√©but\n- Les performances : bien utiliser les index\n- La s√©curit√© : pr√©pared statements contre l'injection SQL\n\nSQL est devenu ma langue pour \"parler\" aux donn√©es !",
    "cover_url": "https://datascientest.com/wp-content/uploads/2022/03/mysql-datascientest.png",
    "created_at": "2024-05-25 11:30:00",
    "user_id": 1
  },
  {
    "id": 8,
    "title": "Authentification avec NextAuth",
    "slug": "authentification-avec-nextauth",
    "summary": "J'ai ajout√© l'authentification Google √† mon app avec NextAuth.",
    "content": "NextAuth.js a transform√© l'impl√©mentation de l'authentification de cauchemar en plaisir ! En quelques configurations, j'avais un syst√®me d'auth complet.\n\n**Configuration de base :**\n```javascript\n// pages/api/auth/[...nextauth].js\nimport NextAuth from 'next-auth'\nimport GoogleProvider from 'next-auth/providers/google'\n\nexport default NextAuth({\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    })\n  ],\n  callbacks: {\n    async session({ session, token }) {\n      session.user.id = token.sub\n      return session\n    }\n  }\n})\n```\n\n**Setup Google OAuth :**\n1. Cr√©er un projet dans Google Cloud Console\n2. Activer Google+ API\n3. Configurer OAuth consent screen\n4. Cr√©er les credentials (Client ID + Secret)\n5. Ajouter les URLs de callback autoris√©es\n\n**C√¥t√© frontend - une simplicit√© d√©concertante :**\n```jsx\nimport { signIn, signOut, useSession } from 'next-auth/react'\n\nfunction LoginButton() {\n  const { data: session, status } = useSession()\n\n  if (status === 'loading') return <p>Loading...</p>\n\n  if (session) {\n    return (\n      <div>\n        <p>Connect√© en tant que {session.user.email}</p>\n        <button onClick={() => signOut()}>Se d√©connecter</button>\n      </div>\n    )\n  }\n\n  return (\n    <button onClick={() => signIn('google')}>\n      Se connecter avec Google\n    </button>\n  )\n}\n```\n\n**Gestion des sessions :**\n```jsx\n// Wrapper pour toute l'app\nimport { SessionProvider } from 'next-auth/react'\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <SessionProvider session={pageProps.session}>\n      <Component {...pageProps} />\n    </SessionProvider>\n  )\n}\n```\n\n**Protection des pages :**\n```jsx\nimport { useSession, getSession } from 'next-auth/react'\nimport { useRouter } from 'next/router'\nimport { useEffect } from 'react'\n\nfunction ProtectedPage() {\n  const { data: session, status } = useSession()\n  const router = useRouter()\n\n  useEffect(() => {\n    if (status === 'loading') return // Still loading\n    if (!session) router.push('/login')\n  }, [session, status, router])\n\n  if (!session) return <div>Vous devez √™tre connect√©...</div>\n\n  return <div>Contenu prot√©g√© !</div>\n}\n```\n\n**Gestion des r√¥les utilisateur :**\nJ'ai √©tendu le syst√®me pour g√©rer admin/user :\n```javascript\ncallbacks: {\n  async session({ session, token }) {\n    // R√©cup√©rer le r√¥le depuis la DB\n    const user = await getUserFromDb(token.email)\n    session.user.role = user?.role || 'user'\n    return session\n  }\n}\n```\n\n**C√¥t√© API - protection des routes :**\n```javascript\nimport { getServerSession } from 'next-auth'\n\nexport default async function handler(req, res) {\n  const session = await getServerSession(req, res, authOptions)\n  \n  if (!session) {\n    return res.status(401).json({ error: 'Non autoris√©' })\n  }\n  \n  // Logique prot√©g√©e\n  res.json({ data: 'Donn√©es s√©curis√©es' })\n}\n```\n\n**Ce qui m'a impressionn√© :**\n- **0 boilerplate** : NextAuth g√®re tokens, refresh, cookies...\n- **S√©curit√©** : CSRF protection, secure cookies, JWT...\n- **Flexibilit√©** : callbacks pour customiser session/JWT\n- **Multi-provider** : Google, GitHub, Discord, credentials...\n- **SSR compatible** : getServerSession pour le server-side\n\n**Providers test√©s :**\n- **Google** : le plus simple, users familiers\n- **GitHub** : parfait pour les apps dev\n- **Discord** : id√©al pour communaut√©s gaming\n- **Credentials** : email/password custom avec bcrypt\n\n**Mon workflow auth type :**\n1. User clique \"Se connecter avec Google\"\n2. Redirection vers Google OAuth\n3. Google renvoie vers mon callback NextAuth\n4. NextAuth cr√©e/met √† jour la session\n5. User redirig√© vers l'app, connect√© !\n\nPlus jamais de gestion manuelle des tokens JWT, sessions, cookies... NextAuth s'occupe de tout ! üéâ",
    "cover_url": "https://supabase.com/_next/image?url=https%3A%2F%2Fobuldanrptloktxcffvn.supabase.co%2Fstorage%2Fv1%2Fobject%2Fpublic%2Fimages%2Fintegrations%2Fnextauth%2Fnextauth_og.png&w=3840&q=75",
    "created_at": "2024-06-05 14:10:00",
    "user_id": 1
  },
  {
    "id": 9,
    "title": "Cr√©er une UI moderne avec Tailwind & Shadcn UI",
    "slug": "creer-une-ui-moderne-avec-tailwind-et-shadcn-ui",
    "summary": "Design system solide, propre et responsive gr√¢ce √† Tailwind + Shadcn.",
    "content": "Apr√®s avoir test√© de nombreuses solutions pour cr√©er des interfaces modernes, je peux affirmer que la combinaison Tailwind CSS et Shadcn UI repr√©sente aujourd'hui l'un des meilleurs workflows pour d√©velopper rapidement et efficacement.\n\n## Pourquoi Tailwind CSS ?\n\nTailwind CSS r√©volutionne ma fa√ßon d'aborder le styling. Fini les fichiers CSS interminables et les noms de classes obscurs ! Avec Tailwind, chaque classe utilitaire a un but pr√©cis : `flex`, `items-center`, `justify-between`, `bg-blue-500`, `hover:bg-blue-600`. Cette approche utility-first me permet de construire des interfaces directement dans le HTML sans jamais quitter mon √©diteur.\n\nL'avantage majeur ? La consistance. Plus de `margin: 12px` par ci, `padding: 8px` par l√†. Tailwind impose un syst√®me de design coh√©rent avec ses espacements standardis√©s (4, 8, 12, 16px...), ses couleurs pr√©d√©finies et ses breakpoints responsive. R√©sultat : mes interfaces ont naturellement l'air plus professionnelles.\n\n## Shadcn UI : la cerise sur le g√¢teau\n\nShadcn UI vient parfaitement compl√©ter Tailwind en fournissant des composants pr√©-construits mais enti√®rement personnalisables. Contrairement aux biblioth√®ques de composants classiques, Shadcn UI ne vous impose pas de d√©pendance externe. Les composants sont copi√©s directement dans votre projet, ce qui vous donne un contr√¥le total.\n\nLes composants comme `Button`, `Card`, `Dialog`, `Select` sont magnifiquement design√©s out-of-the-box. Mais le plus impressionnant, c'est leur int√©gration parfaite avec Tailwind. Chaque composant utilise les classes utilitaires, ce qui rend la personnalisation intuitive.\n\n## Mon workflow en pratique\n\nQuand je commence un nouveau projet, j'installe Tailwind CSS et j'ajoute progressivement les composants Shadcn dont j'ai besoin avec leur CLI : `npx shadcn-ui@latest add button`. En quelques minutes, j'ai une interface propre et responsive.\n\nPour un dashboard par exemple, je peux cr√©er une sidebar avec navigation, des cards pour afficher les donn√©es, des formulaires avec validation, le tout sans √©crire une seule ligne de CSS custom. Et si j'ai besoin d'ajuster un d√©tail, il suffit de modifier quelques classes Tailwind.\n\n## Les r√©sultats parlent d'eux-m√™mes\n\nMes temps de d√©veloppement ont √©t√© divis√©s par deux sur les projets UI. Plus important encore, la maintenabilit√© s'est consid√©rablement am√©lior√©e. Quand un coll√®gue reprend mon code, il comprend imm√©diatement la structure gr√¢ce aux classes explicites de Tailwind.\n\nCette combinaison Tailwind + Shadcn UI est devenue mon stack de r√©f√©rence pour tous mes projets front-end. Elle offre la rapidit√© d'un framework CSS avec la flexibilit√© du CSS vanilla, le tout dans un √©cosyst√®me moderne et bien document√©.",
    "cover_url": "https://media2.dev.to/dynamic/image/width=1600,height=900,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fi5vke8fu8g8659hjvv22.jpeg",
    "created_at": "2024-06-15 18:20:00",
    "user_id": 1
  },
  {
    "id": 10,
    "title": "Cr√©er Wankul Pocket : notre projet d'app de collection de cartes",
    "slug": "creer-wankul-pocket-notre-projet-app-de-collection-de-cartes",
    "summary": "Retour sur le projet Wankul Pocket, une app inspir√©e de l'univers Pok√©mon TCGP qu'on a cod√©e en √©quipe.",
    "content": "Wankul Pocket repr√©sente sans doute le projet le plus ambitieux et enrichissant que j'ai eu la chance de d√©velopper en √©quipe. Cette application web, directement inspir√©e du r√©cent Pok√©mon Trading Card Game Pocket, transpose l'univers des cartes Wankul dans une exp√©rience de collection digitale compl√®te.\n\n## Gen√®se du projet\n\nL'id√©e est n√©e lors d'une session de brainstorming avec l'√©quipe. Nous √©tions tous fans de l'univers Wankul et fascin√©s par le succ√®s de Pok√©mon TCGP. Pourquoi ne pas cr√©er notre propre version avec les personnages et r√©f√©rences que nous adorons ? Le d√©fi √©tait de taille : cr√©er une vraie application de collection avec toute la profondeur d'gameplay que cela implique.\n\n## Architecture technique avec Next.js 15\n\nNous avons opt√© pour Next.js 15 pour sa robustesse et ses nouvelles fonctionnalit√©s, notamment l'am√©lioration du App Router et les Server Actions. L'architecture fullstack nous permet de g√©rer aussi bien le front-end que l'API dans un m√™me projet, facilitant grandement le d√©veloppement collaboratif.\n\nC√¥t√© base de donn√©es, nous avons con√ßu un sch√©ma complexe pour g√©rer les utilisateurs, leurs collections, les cartes, les boosters, les √©changes et le syst√®me d'amiti√©. Chaque carte poss√®de ses statistiques, sa raret√©, et ses visuels uniques inspir√©s de l'univers Wankul.\n\n## Fonctionnalit√©s d√©velopp√©es\n\n### Syst√®me de collection et boosters\nLes utilisateurs peuvent ouvrir des boosters contenant des cartes al√©atoires avec diff√©rents niveaux de raret√©. L'algorithme de distribution respecte les probabilit√©s r√©alistes d'un vrai jeu de cartes : communes, peu communes, rares et ultra-rares. L'animation d'ouverture de booster a √©t√© particuli√®rement travaill√©e pour cr√©er cette sensation d'excitation qu'on ressent avec de vrais packs.\n\n### Syst√®me d'√©change peer-to-peer\nMa contribution principale a port√© sur le syst√®me d'√©change entre joueurs. Les utilisateurs peuvent proposer des trades, les n√©gocier, et les valider de mani√®re s√©curis√©e. J'ai impl√©ment√© toute la logique m√©tier : v√©rification des cartes poss√©d√©es, gestion des √©tats de transaction, rollback en cas d'erreur, et historique des √©changes.\n\n### Relations sociales et syst√®me d'amiti√©\nJ'ai √©galement d√©velopp√© le syst√®me d'amiti√© qui permet aux joueurs de se connecter, voir les collections de leurs amis, et faciliter les √©changes. La gestion des invitations, acceptations et refus d'amiti√© a n√©cessit√© une r√©flexion approfondie sur les √©tats de relation et la pr√©vention des abus.\n\n### Gamification avec les bananes\nLe syst√®me de \"bananes\" (notre monnaie virtuelle) ajoute une dimension √©conomique. Les joueurs gagnent des bananes en compl√©tant des d√©fis quotidiens, hebdomadaires, ou en atteignant certains objectifs de collection. Ces bananes peuvent ensuite √™tre d√©pens√©es pour acheter des boosters premium ou d√©bloquer des fonctionnalit√©s sp√©ciales.\n\n## D√©fis techniques rencontr√©s\n\n### Authentification s√©curis√©e\nL'impl√©mentation du syst√®me d'authentification avec Next.js 15 et les Server Actions m'a beaucoup appris. G√©rer les sessions, la s√©curit√© des tokens, et l'autorisation sur les diff√©rentes routes API a √©t√© un v√©ritable d√©fi technique.\n\n### Validation c√¥t√© API\nChaque action utilisateur doit √™tre rigoureusement valid√©e c√¥t√© serveur. Impossible de faire confiance au front-end pour les √©changes de cartes ou l'ouverture de boosters ! J'ai d√©velopp√© un syst√®me de validation multicouche qui v√©rifie les permissions, la validit√© des donn√©es, et l'int√©grit√© des transactions.\n\n### Performance et optimisation\nAvec des milliers de cartes et de nombreuses relations en base, l'optimisation des requ√™tes est cruciale. L'utilisation des Server Components de Next.js nous a permis de r√©duire consid√©rablement les temps de chargement, notamment pour l'affichage des collections.\n\n## Apprentissages et comp√©tences d√©velopp√©es\n\nCe projet m'a √©norm√©ment fait progresser sur plusieurs aspects. D'abord, comprendre la complexit√© d'une vraie application web avec sa logique m√©tier, ses contraintes de s√©curit√© et ses besoins de performance. Ensuite, apprendre √† travailler en √©quipe sur un codebase partag√©, g√©rer les conflits Git, et maintenir une coh√©rence architecturale.\n\nLa dimension collaborative a √©t√© particuli√®rement enrichissante. Chacun avait ses domaines d'expertise, mais nous devions constamment nous synchroniser pour que l'application reste coh√©rente. Les code reviews, les discussions d'architecture, et les sessions de debugging √† plusieurs m'ont appris l'importance de la communication dans un projet technique.\n\n## R√©sultats et perspectives\n\nAujourd'hui, Wankul Pocket fonctionne comme une vraie application de collection. Les utilisateurs peuvent cr√©er leurs comptes, collectionner des centaines de cartes diff√©rentes, √©changer avec leurs amis, et progresser dans les d√©fis. L'application g√®re plusieurs milliers de cartes en circulation et des dizaines d'utilisateurs actifs.\n\nCe projet restera pour moi une r√©f√©rence en termes d'apprentissage technique et humain. Il m'a donn√© confiance dans ma capacit√© √† d√©velopper des applications complexes et m'a ouvert les yeux sur tous les aspects non-visibles mais cruciaux d'une vraie application web.",
    "cover_url": "https://intrld.com/wp-content/uploads/2023/06/wankul-cartes-1000x600.jpeg",
    "created_at": "2024-07-01 20:00:00",
    "user_id": 1
  }
]
